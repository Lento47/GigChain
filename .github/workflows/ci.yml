name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, cursor/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black mypy
          pip install -r requirements.txt
      
      - name: Run Ruff linter
        run: ruff check . --output-format=github
        continue-on-error: true
      
      - name: Run Black formatter check
        run: black --check --diff .
        continue-on-error: true
      
      - name: Run MyPy type checker
        run: mypy . --ignore-missing-imports --no-strict-optional
        continue-on-error: true

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio
      
      - name: Create test environment file
        run: |
          echo "PORT=5000" > .env
          echo "DEBUG=false" >> .env
          echo "OPENAI_API_KEY=sk-test-key-for-ci" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci-testing-32chars" >> .env
      
      - name: Run tests with coverage
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term
        env:
          OPENAI_API_KEY: sk-test-key-for-ci
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Archive coverage reports
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: htmlcov/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit
      
      - name: Run Safety check for vulnerable dependencies
        run: safety check --json
        continue-on-error: true
      
      - name: Run Bandit security linter
        run: bandit -r . -f json -o bandit-report.json
        continue-on-error: true
      
      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run ESLint
        working-directory: frontend
        run: npm run lint || true
        continue-on-error: true
      
      - name: Type check
        working-directory: frontend
        run: npm run type-check || true
        continue-on-error: true
      
      - name: Build frontend
        working-directory: frontend
        run: npm run build

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest httpx
      
      - name: Create test environment
        run: |
          echo "PORT=5000" > .env
          echo "DEBUG=false" >> .env
          echo "OPENAI_API_KEY=sk-test-key-for-ci" >> .env
          echo "SECRET_KEY=test-secret-key-for-ci-testing-32chars" >> .env
      
      - name: Run backend integration tests
        run: |
          python -m pytest test_backend.py -v
        env:
          OPENAI_API_KEY: sk-test-key-for-ci

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          docker build -t gigchain:test .
      
      - name: Test Docker image
        run: |
          docker run -d --name gigchain-test -p 5000:5000 \
            -e OPENAI_API_KEY=sk-test-key \
            -e SECRET_KEY=test-secret-key-32-characters-long \
            gigchain:test
          sleep 10
          curl -f http://localhost:5000/health || exit 1
          docker stop gigchain-test
          docker rm gigchain-test

  coverage-check:
    name: Coverage Threshold Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Create test environment
        run: |
          echo "PORT=5000" > .env
          echo "OPENAI_API_KEY=sk-test-key-for-ci" >> .env
      
      - name: Run coverage check with minimum threshold
        run: |
          pytest tests/ --cov=. --cov-fail-under=40 --cov-report=term
        env:
          OPENAI_API_KEY: sk-test-key-for-ci

  code-quality:
    name: Code Quality Report
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install radon
      
      - name: Calculate complexity metrics
        run: |
          echo "## Cyclomatic Complexity" >> $GITHUB_STEP_SUMMARY
          radon cc . -a -nb >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Maintainability Index" >> $GITHUB_STEP_SUMMARY
          radon mi . -nb >> $GITHUB_STEP_SUMMARY
