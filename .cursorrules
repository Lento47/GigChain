# Cursor Rules para GigChain.io

## üö´ **RESTRICCIONES DE DEPLOYMENT**

### **NO DOCKER - Solo Desarrollo Local**
- **PROHIBIDO**: Crear im√°genes Docker, docker-compose builds, o deployment containers
- **PERMITIDO**: Solo desarrollo local con `python main.py` en puerto 5000
- **RAZ√ìN**: Optimizaci√≥n de tiempo de desarrollo hasta finalizar funcionalidades
- **CUANDO**: Docker solo al final del proyecto cuando todo est√© terminado

### **Comandos Permitidos:**
```bash
# ‚úÖ PERMITIDO
python main.py                    # Servidor local
python test_*.py                  # Tests individuales
pip install -r requirements.txt   # Instalar dependencias

### ** VERIFICACION **
NO ESTA PERMITIDO DUPLICAR LINEAS NI DEJAR CODIGO SIN USO, ELIMINA LAS DUPLICACIONES Y TRABAJA LO MAS EFICIENTE QUE PUEDAS PARA NO AFRONTAR PROBLEMAS EN EL FUTURO.
USA DEBUG PERO DESHABILITALO SI ENCUENTRAS EL PROBLEMA
ELIMINA DUPLICACIONES 
REMUEVE CODIGO INNECESARIO
MANTENGAMOS EL PROYECTO LO MAS SIMPLE QUE SE PUEDA

# ‚ùå PROHIBIDO (por ahora)
docker build
docker-compose up
./deploy.sh
./deploy.ps1
```

### **Stack de Desarrollo Actual:**
- **Backend**: FastAPI en `http://localhost:5000`
- **Frontend**: React en desarrollo (si est√° configurado)
- **Testing**: Scripts Python individuales
- **Database**: En memoria o archivos locales

## üéØ **OBJETIVOS DEL PROYECTO**

### **Fase Actual: Desarrollo Local**
1. ‚úÖ Backend FastAPI funcionando
2. üîÑ Chat AI implementado
3. üîÑ AI Agents (Negotiation, Generator, Resolver)
4. üîÑ Frontend React
5. üîÑ Testing completo
6. ‚ùå Docker (al final)

### **Prioridades:**
1. **Funcionalidades Core**: AI agents, chat, contratos
2. **Frontend UX**: Interfaz moderna y responsive
3. **Testing**: Cobertura completa de tests
4. **Optimizaci√≥n**: Performance y seguridad
5. **Deployment**: Docker solo al final

## ü§ñ **AGENTS AI**

### **Reglas Estrictas:**
- C√≥digo limpio y modular (Python/TypeScript)
- Output siempre en formato YAML + explicaci√≥n
- M√°ximo 200 l√≠neas por snippet
- Validaci√≥n de sintaxis antes de output
- Temperatura 0.0 para exactitud

### **Agents Disponibles:**
1. **WorkflowGeneratorAgent**: Generaci√≥n de workflows
2. **UIElementAgent**: Elementos UI React
3. **ChainValidatorAgent**: Validaci√≥n de chains AI
4. **NegotiationAgent**: Negociaci√≥n de precios
5. **ContractGeneratorAgent**: Generaci√≥n de contratos inteligentes

## üìù **INSTRUCCIONES PARA AGENTS**

Cuando el usuario pida:
- **Docker/Deployment**: Redirigir a desarrollo local
- **Testing**: Usar scripts Python individuales
- **Frontend**: Trabajar con React local
- **Backend**: Usar FastAPI en localhost:5000
- **AI Code**: Seguir reglas de AGENTS.md

## üîß **COMANDOS √öTILES**

```bash
# Iniciar servidor
python main.py

# Tests espec√≠ficos
python test_chat.py
python test_contract_ai.py
python test_api.py

# Verificar estado
curl http://localhost:5000/health
```

## üîç **VERIFICACI√ìN OBLIGATORIA DE AMBIENTE**

### **ANTES DE CUALQUIER CAMBIO - VERIFICAR SIEMPRE:**
1. **Leer archivo .env** - Verificar variables de entorno configuradas
2. **Verificar estado del servidor** - `curl http://localhost:5000/health`
3. **Comprobar dependencias** - `pip list` y `npm list` (si aplica)
4. **Revisar logs** - Verificar que no hay errores cr√≠ticos
5. **Confirmar configuraci√≥n** - Preguntar al usuario si necesita agregar algo al ambiente

### **NO MODIFICAR .env SIN PERMISO:**
- **PROHIBIDO**: Modificar, crear o eliminar archivo .env
- **PERMITIDO**: Solo leer .env para verificar configuraci√≥n
- **RAZ√ìN**: Usuario ya configur√≥ todo el ambiente
- **CUANDO**: Preguntar antes de sugerir cambios de configuraci√≥n

### **COMANDOS DE VERIFICACI√ìN:**
```bash
# Verificar ambiente (SIEMPRE ANTES DE TRABAJAR)
cat .env                           # Verificar variables de entorno
curl http://localhost:5000/health  # Verificar estado del servidor
pip list | grep -E "(fastapi|openai|uvicorn)"  # Verificar dependencias Python
cd frontend && npm list | grep -E "(react|vite)"  # Verificar dependencias Frontend

# Frontend (en terminal separada)
cd frontend && npm run dev

# Tests adicionales
python test_agents_enhanced.py
curl http://localhost:5000/api/agents/status
```

### **PROTOCOLO DE VERIFICACI√ìN:**
- **ANTES DE CUALQUIER DESARROLLO**: Leer .env, verificar servidor, revisar dependencias, preguntar al usuario
- **SI ALGO FALLA**: NO asumir, NO modificar .env, NO instalar sin confirmaci√≥n, S√ç reportar estado actual

---
*Configuraci√≥n para desarrollo local - Sin Docker hasta finalizar proyecto*
