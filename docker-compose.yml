version: '3.8'

services:
  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://backend:5000
      - REACT_APP_CHAIN_ID=80001
      - REACT_APP_RPC_URL=https://rpc-mumbai.maticvigil.com
      - REACT_APP_CONTRACT_ADDRESSES=${CONTRACT_ADDRESSES}
    depends_on:
      - backend
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  # Backend FastAPI
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://chainlinkpro:${DB_PASSWORD}@postgres:5432/chainlinkpro
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - RPC_URL=https://rpc-mumbai.maticvigil.com
      - CHAIN_ID=80001
      - PRIVATE_KEY=${PRIVATE_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - chainlinkpro-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=chainlinkpro
      - POSTGRES_USER=chainlinkpro
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chainlinkpro-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./frontend/build:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  # IPFS Node
  ipfs:
    image: ipfs/go-ipfs:latest
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - chainlinkpro-network
    restart: unless-stopped
    command: daemon --migrate=true --enable-gc

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  # Log Management - ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs
    ports:
      - "5044:5044"
    depends_on:
      - elasticsearch
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - chainlinkpro-network
    restart: unless-stopped

  # Blockchain Node (Polygon Mumbai)
  polygon-node:
    image: ethereum/client-go:latest
    ports:
      - "8545:8545"
    volumes:
      - polygon_data:/root/.ethereum
    networks:
      - chainlinkpro-network
    restart: unless-stopped
    command: >
      --mumbai
      --http
      --http.addr 0.0.0.0
      --http.port 8545
      --http.api eth,net,web3,personal,admin
      --http.corsdomain "*"
      --ws
      --ws.addr 0.0.0.0
      --ws.port 8546
      --ws.api eth,net,web3,personal,admin
      --ws.origins "*"

  # Backup Service
  backup:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    networks:
      - chainlinkpro-network
    restart: unless-stopped
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U chainlinkpro chainlinkpro > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name 'backup_*.sql' -mtime +7 -delete
          sleep 86400
        done
      "

volumes:
  postgres_data:
  redis_data:
  ipfs_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  polygon_data:

networks:
  chainlinkpro-network:
    driver: bridge